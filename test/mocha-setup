// Define common functions and values for all unit tests.

const which = require('which');
const path = require( "path" );

// Get the real path of homebridge instead of a dev dependancy,
// which caused issues if you forget to update dependancies but
// upgrade homebridge.
const homebridgePath = which.sync( 'homebridge', { nothrow: true } )

let apiPath;
if ( homebridgePath )
{
   let dirname = path.dirname( homebridgePath );

   console.log( "Found homebridge in path %s", dirname );
   apiPath = `${ dirname }/../lib/node_modules/homebridge/lib/api`;
   global.HomebridgeAPI = require( apiPath ).HomebridgeAPI;

   if ( ! global.HomebridgeAPI )
   {
      console.log( "homebridgeAPI not available !!!" );
      process.exit( 10 );
   }

   // For serializing/deserializing arrays of accessories
   let platformAccessoryPath = `${ dirname }/../lib/node_modules/homebridge/lib/platformAccessory`;
   global.platformAccessory_1 = require( platformAccessoryPath );

} else
{
   console.log( "homebridge not found !!!" );
   process.exit( 10 );
}
console.log( "Found api in %s", apiPath );

// IMPORTANT - ALL GLOBALS MUST BE DEFINED IN .eslintrc.json for lint to work
global.fs = require( 'fs' );
global.assert = require( "chai" ).assert;
global.expect = require( "chai" ).expect;
global.sinon  = require( "sinon" );

global.ACC_EOL = 255;
global.DEVICE_EOL = 81;
global.FORMAT_EOL = 11;
global.UNITS_EOL = 5;
global.PERMS_EOL = 9;
global.ACCESS_EOL = 3;

// These would be the uninitialized values, used for unit testing
global.ACC_DATA = require( '../lib/CMD4_ACC_TYPE_ENUM' );
global.CMD4_ACC_TYPE_ENUM = ACC_DATA.CMD4_ACC_TYPE_ENUM;

global.DEVICE_DATA = require( '../lib/CMD4_DEVICE_TYPE_ENUM' );
global.CMD4_DEVICE_TYPE_ENUM = DEVICE_DATA.CMD4_DEVICE_TYPE_ENUM;

global.CHAR_DATA = require( `../lib/CMD4_CHAR_TYPE_ENUMS` );
global.CMD4_CHAR_TYPE_ENUMS = CHAR_DATA.CMD4_CHAR_TYPE_ENUMS;


global.Logger = require("../utils/Logger");


// A true sleep ( blocking ).
const moment = require( "moment" );
global.sleep = function( secondsToSleep = 1 )
{
   let sleepUntill = moment( ).add( secondsToSleep, 'seconds');
   while( moment ( ).isBefore( sleepUntill ) ) { /* block the process */ }
}

global.accEnumIndexToC = function( index )
{
   return CMD4_ACC_TYPE_ENUM.properties[ index ].type;
}
global.devEnumIndexToC = function( index )
{
   return CMD4_DEVICE_TYPE_ENUM.properties[ index ].deviceName;
}

// How it's used
// sleep( 10 );

global.cleanStatesDir = function( )
{
   const os = require( "os" );
   const cmd4StateDir = os.homedir( ) + "/.homebridge/Cmd4Scripts/Cmd4States/"

   var glob = require( "glob" );


   glob( cmd4StateDir + "Status_Device_*", null, function ( er, files )
   {
      for ( var file of files )
      {
         // To use the promise of unlink, it must be in an async function
         // so put it in one.  Why not unLinkSync, because for whatever reason
         // some files were notbremoved synchronously.
         ( async( ) =>
         {
            await fs.unlink( file, function( err, result )
            {
                  if ( err && err.code != 'ENOENT' )
                     console.log( 'file not removed err: ' + err + " result: " + result );
            });
         });
      }
   })
}




/* setup.js */
/* These instructions taken from: https://airbnb.io/enzyme/docs/guides/jsdom.html */

const fs = require('fs')

const { JSDOM } = require('jsdom-canvas-2');

const jsdom = new JSDOM('<!doctype html><html><body></body></html>');
const { window } = jsdom;

function copyProps(src, target) {
  Object.defineProperties(target, {
    ...Object.getOwnPropertyDescriptors(src),
    ...Object.getOwnPropertyDescriptors(target),
  });
}


global.window = window;
global.document = window.document;
global.navigator = {
  userAgent: 'node.js',
};
global.requestAnimationFrame = function (callback) {
  return setTimeout(callback, 0);
};
global.cancelAnimationFrame = function (id) {
  clearTimeout(id);
};
copyProps(window, global);

// For unit testing, Generate a random number between 1 & 100;
global.genRan = function () { return Math.floor(Math.random() * 100) + 1 };
